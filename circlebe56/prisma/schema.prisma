// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String

  fullName   String?
  userName   String?
  bio        String?
  image      String?  @default("https://static.vecteezy.com/system/resources/previews/018/765/757/original/user-profile-icon-in-flat-style-member-avatar-illustration-on-isolated-background-human-permission-sign-business-concept-vector.jpg")
  background String?  @default("https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQl4u76xJAm7BiHyeq_CQT4cuBP6bL9r1byrw&s")
  following  Follow[] @relation("Following")
  followers  Follow[] @relation("Followers")

  post  Post[]
  reply Reply[]
  Like  Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Post {
  id           Int     @id @default(autoincrement())
  content      String?
  image        String?
  likesCount   Int?    @default(0)
  repliesCount Int?    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reply Reply[]
  like  Like[]

  authorId Int
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("post")
}

model Reply {
  id           Int     @id @default(autoincrement())
  content      String?
  image        String?
  likesCount   Int?    @default(0)
  repliesCount Int?    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  authorId Int
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("reply")
}

model Follow {
  id         Int  @id @default(autoincrement())
  followerId Int
  follower   User @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)

  followingId Int
  following   User @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

  isFollowing Boolean @default(false)

  createdAt DateTime @default(now())

  @@unique([followerId, followingId])
}

model Like {
  id      Int @id @default(autoincrement())
  userId  Int
  postId  Int
  replyId Int

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  cratedAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("like")
}
